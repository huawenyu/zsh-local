# vim: ft=zsh
# vim: set copyindent preserveindent et sts=0 sw=4 ts=4 :
#

# add user/pass to: ~/.smbclient.conf
# disable log in /etc/samba/smb.conf
#      syslog = 0
#
# Sample input:
#   Version: FortiProxy-KVM v7.0.0,build0082,220527 (Interim)
#   Version: FortiGate-VM64-KVM v7.2.1,build1220,220615 (Interim)
#   Log: firmware FortiGate-1100E v7.0.6,build0366b0366,220606 (GA.F) (Release)
#
USAGE=$(cat <<-END
	  Sample:
	    smb-get 'FortiProxy-KVM v7.0.0,build0082,220527 (Interim)'
	    smb-get 'firmware FortiGate-1100E v7.0.6,build0366b0366,220606 (GA.F) (Release)'
END
)
_ZT_ARGS_Usage=${USAGE}
if ! parse-args "$@" ; then
    echo "----------end--------------"
    return
fi


product=$(expr match "${_ZT_ARGS_Positional}" '.*Forti\([[:alpha:]]*\)-.*$')
mainver=$(expr match "${_ZT_ARGS_Positional}" '.* v\([[:digit:]]*\).*$')
fullver=$(expr match "${_ZT_ARGS_Positional}" '.* v\(.*\),build.*$')
buildnum=$(expr match "${_ZT_ARGS_Positional}" '.*build\([[:digit:]]*\).*$')
model=$(expr match "${_ZT_ARGS_Positional}" '^[^-]*-\([[:graph:]]*\).*$')
release=$(expr match "${_ZT_ARGS_Positional}" '.*Release\(.*\)$')
if [ -z ${release} ]; then
    release='deb'
else
    release='out'
fi

dumpStr="  Info-line: ${_ZT_ARGS_Positional}\n    product:'$product' ver:'$mainver'-'$fullver' model:'$model' buildnum:'$buildnum' release:'$release'"
if [ -z ${product} ] || [ -z ${mainver} ] || [ -z ${model} ] || [ -z ${buildnum} ] || [ -z ${release} ] ; then
    echo -e $dumpStr
    do-echo $USAGE
    USAGE=''
    echo "Can't get correct info, EXIT!"
    return 1
fi


if [ ${product} = "Proxy" ]; then
    product='FPX'
elif [ ${product} = "Gate" ]; then
    product='FGT'
fi
model=${model/-/_}

echo -e $dumpStr

#get ${model}-v6-build${buildnum}-FORTINET.deb;
#get ${model}-v6-build${buildnum}-FORTINET.out;
#get ${model}-v6-build${buildnum}-FORTINET.deb.extra.tgz;
#get ${model}-v6-build${buildnum}-FORTINET.out.extra.tgz;
#
#get FPX_KVM-v700-build0082-FORTINET.out.extra.tgz;'
#get FGT_1000F-v7.0.6.F-build6315-FORTINET.out.extra.tgz
if [ ${product} = "FPX" ]; then
    cmdStr="smbclient -A ~/.smbclient.conf //imagesvr/Images -c '
        cd FortiProxy/v${mainver}.00/images/build${buildnum}; \
        get ${product}_${model}-v${mainver}00-build${buildnum}-FORTINET.${release}.extra.tgz; \
        '"
    do-echo ${cmdStr}
    do-cmd ${cmdStr}
elif [ ${product} = "FGT" ]; then
    cmdStr="smbclient -A ~/.smbclient.conf //imagesvr/Images -c '\
        cd FortiOS/v${mainver}.00/images/build${buildnum}; \
        get ${product}_${model}-v${fullver}.F-build${buildnum}-FORTINET.${release}.extra.tgz; \
        '"
    do-echo ${cmdStr}
    do-cmd ${cmdStr}
elif [ ${product} = "fos701" ]; then
    echo "smbclient -A ~/.smbclient.conf //imagesvr/Images -c 'cd FortiOS/v7.00/images/build${buildnum}; get ${model}-v7.0.1-build${buildnum}-FORTINET.out.extra.tgz;'"
    eval "smbclient -A ~/.smbclient.conf //imagesvr/Images -c '\
        cd FortiOS/v7.00/images/build${buildnum}; \
        get ${model}-v7.0.1-build${buildnum}-FORTINET.${release}.extra.tgz; \
        '"
elif [ ${product} = "ls" ]; then
    eval "smbclient -A ~/.smbclient.conf //imagesvr/Images -c '\
        cd FortiOS/v${mainver}.00/images/build${buildnum}; \
        ls *-FORTINET.out.extra.tgz; \
        '"
fi

