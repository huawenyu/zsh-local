# vim: ft=zsh
# vim: set copyindent preserveindent et sts=0 sw=4 ts=4 :
#

# add user/pass to: ~/.smbclient.conf
# disable log in /etc/samba/smb.conf
#      syslog = 0
#
# Sample input:
#   Version: FortiProxy-KVM v7.0.0,build0082,220527 (Interim)
#   Version: FortiGate-VM64-KVM v7.2.1,build1220,220615 (Interim)
#   Log: firmware FortiGate-1100E v7.0.6,build0366b0366,220606 (GA.F) (Release)
#
# Sample-1: FortiProxy normal build
#   smb-get "firmware FortiProxy-4000E v7.0.8,build0122b0122,221215 (GA.M) (Release)"
#   The real path: \FortiProxy\v7.00\images\build0122\FPX_4000E-v700.M-build0122-FORTINET.out.extra.tgz
#
# Sample-2: FortiProxy special branch
#   smb-get "firmware FortiProxy-2000E v7.0.8,build8012b0122,230222 (interim)"
#   The real path: \FortiProxy\v7.00\images\NoMainBranch\fproxy_7-0_gui_frozen_b0122\build_tag_8012\FPX_2000E-v700-build8012-FORTINET.out.extra.tgz
#
#   smb-get "firmware FortiProxy-VM64 v7.0.10,build8033b0153,230513 (GA) (Release)"
#   The real path: \FortiProxy\v7.00\images\NoMainBranch\fproxy_7-0_dbs_fwdsvr_b0153\build_tag_8033\FPX_VMWARE-v700-build8033-FORTINET.deb.extra.tgz
#
# Sample-3: FOS 7.x: special-branch '7-0_wad_high_cpu' B8862
#   smb-get "firmware FortiGate-3300E v7.0.12,build8862b0523,230715 (GA) (Release)"
#   The real path: \FortiOS\v7.00\images\NoMainBranch\fg_7-0_wad_high_cpu\build_tag_8862\FGT_3300E-v7.0.12-build8862-FORTINET.out.extra.tgz
#     Info-line:
#       product:'Gate'
#       ver:'7'-'7.0.12'
#       model:'3300E'
#       buildnum:'8862'
#       branchnum:'0523'
#       mature:'' from:'GA'
#       release:'out' from:'Release'

# https://stackoverflow.com/questions/53030233/what-is-the-zsh-equivalent-for-bash-rematch
setopt BASH_REMATCH

USAGE=$(cat <<-END
	  Sample:
	    smb-get image
	    smb-get branch
	    smb-get login

	    smb-get "FortiOS/v7.00/images/build2639/FGT_101F-v7-build2639-FORTINET.deb.extra.tgz"    <=== Get from official-crash-parse-webpage
	    smb-get 'FortiProxy-KVM v7.0.0,build0082,220527 (Interim)'
        smb-get "firmware FortiGate-3300E v7.0.12,build8862b0523,230715 (GA) (Release)" -d "br_7-0_wad_high_cpu"
	    smb-get 'FortiProxy-2000E v7.0.0,build8003b0110,221115 (GA) fortidev 6.0.1.0005'    <=== diag sys process pstack <pid>
	    smb-get 'Version: FortiGate-2201E v7.2.4,build1357,221030 (interim)'   <== interim out version
	    smb-get 'firmware FortiGate-1100E v7.0.6,build0366b0366,220606 (GA.F) (Release)'

	    smb-get "firmware FortiProxy-4000E v7.0.8,build0122b0122,221215 (GA.M) (Release)"
	            Path:    \FortiProxy\v7.00\images\build0122\FPX_4000E-v700.M-build0122-FORTINET.out.extra.tgz
	            Path from official-crash-parser-webpage:   FortiOS/v7.00/images/build2639/FGT_101F-v7-build2639-FORTINET.deb.extra.tgz
END
)
_ZT_ARGS_Usage=${USAGE}
if ! parse-args "$@" ; then
    echo "----------end--------------"
    return
fi


# Initialize local variable
if [ -z ${_ZT_ARGS_Dst} ] ; then
    is_gitdir=$(git rev-parse --is-inside-work-tree)
    if [ ${is_gitdir} = "true" ]; then
        branchName=$(git rev-parse --abbrev-ref HEAD)
    else
        echo "'`pwd`' is not git branch, please assign by -d '<special-branch-name>'"
        return 1
    fi
else
    branchName=${_ZT_ARGS_Dst}
fi

tmpFile="/tmp/tmpfile_smbget1"
tmpFile2="/tmp/tmpfile_smbget2"
cmdStr="echo 'No command!'"
rm -fr $tmpFile
rm -fr $tmpFile2


if [ "${_ZT_ARGS_Positional}" = "image" ]; then
    cmdStr="smbclient -A ~/.smbclient.conf //imagesvr/images -c ' \
        cd FortiProxy/v7.00/images; \
        ls; \
        '"
    do-echo ${cmdStr}
    do-cmd ${cmdStr}
    return
elif [ "${_ZT_ARGS_Positional}" = "branch" ]; then
    cmdStr="smbclient -A ~/.smbclient.conf //imagesvr/images -c ' \
        cd FortiProxy/v7.00/images/NoMainBranch; \
        ls; \
        '"
    do-echo ${cmdStr}
    do-cmd ${cmdStr}
    return
elif [ "${_ZT_ARGS_Positional}" = "login" ]; then
    eval "smbclient -A ~/.smbclient.conf //imagesvr/images"
    do-echo ${cmdStr}
    do-cmd ${cmdStr}
    return
fi


# Args:  "FortiOS/v7.00/images/build2639/FGT_101F-v7-build2639-FORTINET.deb.extra.tgz"
isPath=$(expr match "${_ZT_ARGS_Positional}" '.*\.extra\.tgz$')
if [ -n "$isPath" ]; then
    aDir=$(dirname "${_ZT_ARGS_Positional}")
    aFile=$(basename "${_ZT_ARGS_Positional}")
    cmdStr="smbclient -A ~/.smbclient.conf //imagesvr/images -c ' \
        cd ${aDir}; \
        get ${aFile}; \
        '"
    do-echo ${cmdStr}
    do-cmd ${cmdStr}
    return
fi


# Args:  "firmware FortiProxy-4000E v7.0.8,build0122b0122,221215 (GA.M) (Release)"
product=$(expr match "${_ZT_ARGS_Positional}" '.*Forti\([[:alpha:]]*\)-.*$')
mainver=$(expr match "${_ZT_ARGS_Positional}" '.* v\([[:digit:]]*\).*$')
fullver=$(expr match "${_ZT_ARGS_Positional}" '.* v\(.*\),build.*$')
buildnum=$(expr match "${_ZT_ARGS_Positional}" '.*build\([[:digit:]]*\).*$')
branchnum=$(expr match "${_ZT_ARGS_Positional}" '.*build.*b\([[:digit:]]*\),.*$')
model=$(expr match "${_ZT_ARGS_Positional}" '^[^-]*-\([[:graph:]]*\).*$')

# Solve release:
    # 'Interim' from 'FortiProxy-KVM v7.0.0,build0082,220527 (Interim)'
    # 'Release' from "firmware FortiProxy-4000E v7.0.8,build0122b0122,221215 (GA.M) (Release)"
    releaseOrg=$(expr match "${_ZT_ARGS_Positional}" '.* (\(.*\)).*$')

    release='out'
    if [ ${releaseOrg} = "Release" ] || [ ${releaseOrg} = "GA" ] ; then
        release='out'
    elif [ ${releaseOrg} = "interim" ]; then
        release='out'
    elif [ ${releaseOrg} = "Interim" ]; then
        release='deb'
    fi

# Solve mature:
    # 'GA.M' from "firmware FortiProxy-4000E v7.0.8,build0122b0122,221215 (GA.M) (Release)"
    matureOrg=$(expr match "${_ZT_ARGS_Positional}" '.* (\(.*\)).*\(Release\).*$')

    mature=''
    if [[ ${matureOrg} == "GA.M" ]] || [[ ${matureOrg} == "GA.MATURE" ]]; then
        mature='.M'
    elif [[ ${matureOrg} == "GA.F" ]]; then
        mature='.F'
    fi

# Output:
read -r -d '' dumpStr << EndOfMessage
Info-line:
  path-directly:'$path'
  product:'$product'
  ver:'$mainver'-'$fullver'
  model:'$model'
  buildnum:'$buildnum'
  branchnum:'$branchnum'
  mature:'$mature' from:'$matureOrg'
  release:'$release' from:'$releaseOrg'
EndOfMessage

if [ -z ${product} ] || [ -z ${mainver} ] || [ -z ${model} ] || [ -z ${buildnum} ] || [ -z ${release} ] ; then
    echo -e $dumpStr
    do-echo $USAGE
    USAGE=''
    echo "Can't get correct info, EXIT!"
    return 1
fi

model=${model/-/_}
echo -e $dumpStr

if [ ${_ZT_ARGS_Dryrun} = "true" ]; then
    echo "-------------------"
    echo "Dryrun, EXIT!"
    echo "-------------------\n"
    return 0
fi


#get ${model}-v6-build${buildnum}-FORTINET.deb;
#get ${model}-v6-build${buildnum}-FORTINET.out;
#get ${model}-v6-build${buildnum}-FORTINET.deb.extra.tgz;
#get ${model}-v6-build${buildnum}-FORTINET.out.extra.tgz;
#
#get FPX_KVM-v700-build0082-FORTINET.out.extra.tgz;'
#get FGT_1000F-v7.0.6.F-build6315-FORTINET.out.extra.tgz

imgFilePrefix0="FortiProxy"
if [[ ${product} == "Proxy" ]]; then
    imgFilePrefix0="FortiProxy"
    branchPrefix="fproxy_"
elif [[ ${product} == "Gate" ]]; then
    imgFilePrefix0="FortiOS"
    branchPrefix="fg_"
else
    if [ ${buildnum} = ${branchnum} ]; then
        echo "List all: '${imgFilePrefix0}/v${mainver}.00/images/build${buildnum}'"
        eval "smbclient -A ~/.smbclient.conf //imagesvr/Images -c '\
            cd ${imgFilePrefix0}/v${mainver}.00/images/build${buildnum}; \
            ls *-FORTINET.out.extra.tgz; \
            '"
    fi
    return 0
fi


if [ ${buildnum} = ${branchnum} ]; then
    imgFilePrefix="${imgFilePrefix0}/v${mainver}.00/images"

    imgFileDir="cd ${imgFilePrefix}/build${buildnum};"
    imgFile_ls="cd ${imgFilePrefix}/build${buildnum};ls"
    imgFile_grep="${model/VM64/VMWARE}-.*-build${buildnum}.*\.${release}\.extra\.tgz "

    branchName=""
    curState="stateBranchName"
else
    # Handle special branch:
    #
    # Output: \FortiProxy\v7.00\images\NoMainBranch\fproxy_7-0_gui_frozen_b0122\build_tag_8012
    #
    imgFilePrefix="${imgFilePrefix0}/v${mainver}.00/images/NoMainBranch"

    # First time, suppose current branch-name is correct,
    #   for example, execute 'smb-get' just from the git-branch dir, or assign branch-name directly by '-d <branch-name>'
    imgFileDir="cd ${imgFilePrefix}/${branchName/br_/$branchPrefix}/build_tag_${buildnum};"
    imgFile_ls="cd ${imgFilePrefix}/${branchName/br_/$branchPrefix}/build_tag_${buildnum};ls"
    imgFile_grep="${model/VM64/VMWARE}-.*-build${buildnum}.*\.${release}\.extra\.tgz "

    curState="stateBranchName"
fi


    if [ $curState ]; then
        # State: "stateBranchName" "stateGuessBranch" "stateGuessFile"  "stateGetFile" "stateExit"
        for count in $(seq 1 5)
        do
            echo "\nState-${count}='$curState'"

            # Check valid path, exit if invalid
            if [[ $curState != "stateGuessBranch" ]]; then
                smbclient -A ~/.smbclient.conf //imagesvr/Images -c "${imgFileDir}" 2>&1 > $tmpFile
                if grep -q "NT_STATUS_OBJECT_PATH_NOT_FOUND" $tmpFile; then
                    echo "Path not exit: ${imgFileDir}"
                    if [[ $curState != "stateBranchName" ]]; then
                        cmdStr="echo 'Path Error: ${imgFilePath}'"
                        break
                    fi

                    curState="stateGuessBranch"
                    continue
                fi
            fi


            if [[ $curState == "stateExit" ]]; then
                break
            elif [[ $curState == "stateBranchName" ]]; then
                echo "Correct branch '${branchName}'"
                curState="stateGetFile"
            elif [[ $curState == "stateGuessBranch" ]]; then
                # Suppose don't know branch-name, here try to guess the branch-name from build-number
                #   for example, execute 'smb-get' from any other git-branch dir
                echo "Remote path not exist: ${imgFileDir}, try guess branch-name by build-number, wait ..."
                imgFileDir="cd ${imgFilePrefix}/;"
                imgFile_ls="cd ${imgFilePrefix};recurse;ls"
                imgFile_grep="build_tag_${buildnum} "
                curState="stateGuessFile"
            elif [[ $curState == "stateGuessFile" ]]; then
                # \FortiProxy\v7.00\images\NoMainBranch\fproxy_7-0_dbs_fwdsvr_b0153
                #   build_tag_8033                      D        0  Fri May 12 20:12:45 2023
                cat $tmpFile2 | grep -B1 "build_tag_${buildnum} "

                imgFilePath=$( cat $tmpFile2 | grep -B1 "build_tag_${buildnum} " | head -n1 | sed -r 's,\\,/,g' )
                imgFileDir="cd ${imgFilePath}/build_tag_${buildnum};"
                imgFile_ls="cd ${imgFilePath}/build_tag_${buildnum};ls"
                imgFile_grep="${model/VM64/VMWARE}-.*-build${buildnum}.*\.${release}\.extra\.tgz "

                branchName=$( echo "$imgFilePath" | rev | cut -d '/' -f1 | rev )
                echo "branchName=$branchName"
                curState="stateGetFile"
            elif [[ $curState == "stateGetFile" ]]; then
                echo "file1"
                cat $tmpFile
                echo "file2"
                cat $tmpFile2

                imgFileStr=$( cat $tmpFile2 )
                if [[ $imgFileStr =~ "(\S+) " ]]; then
                    fileName=${BASH_REMATCH[2]}
                    if [[ -f "$fileName" ]]; then
                        echo "Exit: $fileName exists, don't need get again!"
                        break
                    fi

                    if [[ -z $branchName ]]; then
                        cmdStr="smbclient -A ~/.smbclient.conf //imagesvr/Images -c '
                            cd ${imgFilePrefix}/build${buildnum}; \
                            get ${fileName}; \
                            '"
                    else
                        cmdStr="smbclient -A ~/.smbclient.conf //imagesvr/Images -c '
                            cd ${imgFilePrefix}/${branchName/br_/$branchPrefix}/build_tag_${buildnum}; \
                            get ${fileName}; \
                            '"
                    fi
                fi
                break
            else
                echo "\n-------------------\n"
                cat $tmpFile2
                echo "\n-------------------\n"
                cat $tmpFile
                echo "\n-------------------\n"
                cmdStr="echo 'Exit: State error - ${curState}'"
            fi


            do-echo "smbclient -A ~/.smbclient.conf //imagesvr/Images -c '${imgFile_ls}' 2>&1 | grep -E '${imgFile_grep}'"
            # grep -m 1 -E "${imgFile_grep}" > $tmpFile <(smbclient -A ~/.smbclient.conf //imagesvr/Images -c "${imgFile_ls}" 2>&1 | grep -E "NoMainBranch|${imgFile_grep}" | tee $tmpFile2)
            grep -m 1 -E "${imgFile_grep}" > $tmpFile \
                <(smbclient -A ~/.smbclient.conf //imagesvr/Images -c "${imgFile_ls}" 2>&1 \
                  | grep -E "NoMainBranch|${imgFile_grep}" \
                  | tee $tmpFile2)

        done
    fi


do-echo ${cmdStr}
if [ ${_ZT_ARGS_Dryrun} = "true" ]; then
    echo "-------------------"
    echo "Dryrun, EXIT!"
    echo "-------------------\n"
else
    do-cmd ${cmdStr}
fi
